name: Test, Build and Deploy to Server

on:
  push:

jobs:
  lint:
    name: Lint Codebase
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15'

      - name: Install Dependencies
        run: npm ci

      - name: Install ESLint
        run: npm install --no-save eslint-formatter-junit

      - name: Run ESLint (JUnit XML)
        run: |
          npx eslint \
            -c .eslintrc.json \
            --ext .js,.jsx,.ts,.tsx \
            src \
            --format junit \
            --output-file eslint-report.xml

      - uses: dorny/test-reporter@v2
        if: always()
        with:
          name: ESLint
          path: eslint-report.xml
          reporter: java-junit

  format:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15'

      - name: Install Dependencies
        run: npm ci

      - name: Run Prettier Check and Generate Report
        run: |
          set -eo pipefail

          set +e
          PRETTIER_OUTPUT=$(npx prettier --check . 2>&1)
          PRETTIER_STATUS=$?
          set -e

          REPORT_FILE="prettier-report.xml"
          
          if [ $PRETTIER_STATUS -eq 0 ]; then
            echo "Prettier found no formatting issues."
            cat <<EOF > "$REPORT_FILE"
          <testsuites name="Prettier Report" tests="1" failures="0" errors="0" time="1">
            <testsuite name="Prettier" tests="1" failures="0" errors="0" time="1">
              <testcase name="Code Formatting Check" classname="prettier.check" time="1"/>
            </testsuite>
          </testsuites>
          EOF
          else
            echo "Prettier found formatting issues:"
            echo "$PRETTIER_OUTPUT"
          
            MESSAGE_ESCAPED=$(echo "Prettier found formatting issues" | sed 's/&/\&/g; s/</\</g; s/>/\>/g; s/"/\"/g; s/'"'"'/\'/g')
            CDATA_CONTENT=$(echo "$PRETTIER_OUTPUT" | sed 's/]]>/]]>/g')

            cat <<EOF > "$REPORT_FILE"
          <testsuites name="Prettier Report" tests="1" failures="1" errors="0" time="1">
            <testsuite name="Prettier" tests="1" failures="1" errors="0" time="1">
              <testcase name="Code Formatting Check" classname="prettier.check" time="1">
                <failure message="$MESSAGE_ESCAPED"><![CDATA[$CDATA_CONTENT]]></failure>
              </testcase>
            </testsuite>
          </testsuites>
          EOF
          fi
          exit $PRETTIER_STATUS

      - name: Publish Prettier Report
        uses: dorny/test-reporter@v2
        if: always()
        with:
          name: Prettier Format
          path: prettier-report.xml
          reporter: java-junit

  unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [ lint, format ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15'

      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm run test

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [ lint, format ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15'

      - name: Install Dependencies
        run: npm ci

      - name: Run Cypress E2E Tests
        uses: cypress-io/github-action@v6.9.0
        with:
          start: npm run dev
          wait-on: http://localhost:5173
          wait-on-timeout: 60
          command: npm run e2e:run

  deploy:
    name: Build and Deploy
    needs: [ unit, e2e ]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15'

      - name: Install Dependencies
        run: npm ci

      - name: Build Project
        run: npm run build
      - name: Remove Old Files on Server
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: "${{ secrets.SSH_HOST }}"
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            find ~/Webserver/WA-DP -mindepth 1 -maxdepth 1 -exec rm -r {} \;

      - name: Transfer New Files
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          rsync -avz -e "ssh -i private_key.pem -o StrictHostKeyChecking=no" ./dist/ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/Webserver/WA-DP/
          rm -f private_key.pem
