name: Test, Build and Deploy to Server

on:
  push:

jobs:
  lint:
    name: Lint Codebase
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15'

      - name: Install Dependencies
        run: npm ci

      - name: Install ESLint
        run: npm install --no-save eslint-formatter-junit

      - name: Run ESLint (JUnit XML)
        run: |
          npx eslint \
            -c .eslintrc.json \
            --ext .js,.jsx,.ts,.tsx \
            src \
            --format junit \
            --output-file eslint-report.xml

      - uses: dorny/test-reporter@v2
        if: always()
        with:
          name: ESLint
          path: eslint-report.xml
          reporter: java-junit

  format:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15'

      - name: Install Dependencies
        run: npm ci

      - name: Check Prettier
        run: npx prettier --check .

      - name: Generate Prettier JUnit Report
        if: failure()
        shell: bash
        run: |
          echo "Generating Prettier JUnit report..."
          
          FILES_OUTPUT=$(npx prettier --list-different .)
          PRETTIER_LD_EXIT_CODE=$?

          echo "--- Prettier --list-different output (exit code: ${PRETTIER_LD_EXIT_CODE}) ---"
          if [ -n "$FILES_OUTPUT" ]; then
            echo "${FILES_OUTPUT}"
          else
            echo "(No files listed by --list-different)"
          fi
          echo "-------------------------------------------------"

          if [ "$PRETTIER_LD_EXIT_CODE" -gt 1 ]; then
            echo "Error: 'npx prettier --list-different .' failed with critical exit code $PRETTIER_LD_EXIT_CODE."
            printf '<?xml version="1.0" encoding="UTF-8"?>\n<testsuites name="PrettierInternalError">\n' > prettier-report.xml
            printf '  <testsuite name="PrettierExecution" tests="1" failures="1">\n' >> prettier-report.xml
            printf '    <testcase classname="Prettier" name="ListDifferentError">\n' >> prettier-report.xml
            printf '      <failure message="npx prettier --list-different . failed with exit code %s"/>\n' "$PRETTIER_LD_EXIT_CODE" >> prettier-report.xml
            printf '    </testcase>\n  </testsuite>\n</testsuites>\n' >> prettier-report.xml
            echo "Prettier JUnit report generated with internal error."
            cat prettier-report.xml
            exit 0 
          fi

          printf '<?xml version="1.0" encoding="UTF-8"?>\n<testsuites>\n' > prettier-report.xml

          if [ -z "$FILES_OUTPUT" ]; then
            echo "Warning: Prettier --check failed, but --list-different returned no files. Reporting a generic failure."
            printf '<testsuite name="PrettierGlobal" tests="1" failures="1">\n' >> prettier-report.xml
            printf '  <testcase classname="Prettier" name="FormattingFailureUnspecifiedFile">\n' >> prettier-report.xml
            printf '    <failure message="Prettier --check found issues, but no specific files were listed by --list-different. Check Prettier logs for global errors."/>\n' >> prettier-report.xml
            printf '  </testcase>\n' >> prettier-report.xml
            printf '</testsuite>\n' >> prettier-report.xml
          else
            echo "$FILES_OUTPUT" | while IFS= read -r f; do
              if [ -z "$f" ]; then
                continue
              fi
              f_escaped=$(echo "$f" | sed 's/&/\&/g; s/</\</g; s/>/\>/g; s/"/\"/g; s/'"'"'/\'/g')
              printf '<testsuite name="%s" tests="1" failures="1">\n' "$f_escaped" >> prettier-report.xml
              printf '  <testcase classname="Prettier" name="%s">\n' "$f_escaped" >> prettier-report.xml
              printf '    <failure message="File is not formatted"/>\n' >> prettier-report.xml
              printf '  </testcase>\n' >> prettier-report.xml
              printf '</testsuite>\n' >> prettier-report.xml
            done
          fi

          printf '</testsuites>\n' >> prettier-report.xml
          echo "Prettier JUnit report generated successfully at prettier-report.xml:"
          cat prettier-report.xml

      - name: Publish Prettier Report
        if: always()
        uses: dorny/test-reporter@v2
        with:
          name: Prettier
          path: prettier-report.xml
          reporter: java-junit
          fail-on-error: true

  unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [ lint, format ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15'

      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm run test

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [ lint, format ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15'

      - name: Install Dependencies
        run: npm ci

      - name: Run Cypress E2E Tests
        uses: cypress-io/github-action@v6.9.0
        with:
          start: npm run dev
          wait-on: http://localhost:5173
          wait-on-timeout: 60
          command: npm run e2e:run

  deploy:
    name: Build and Deploy
    needs: [ unit, e2e ]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15'

      - name: Install Dependencies
        run: npm ci

      - name: Build Project
        run: npm run build
      - name: Remove Old Files on Server
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: "${{ secrets.SSH_HOST }}"
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            find ~/Webserver/WA-DP -mindepth 1 -maxdepth 1 -exec rm -r {} \;

      - name: Transfer New Files
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          rsync -avz -e "ssh -i private_key.pem -o StrictHostKeyChecking=no" ./dist/ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/Webserver/WA-DP/
          rm -f private_key.pem
